name: Maven Java CI Pipeline

on:
  push:
    branches: 
      - main
      - development
  pull_request:
    branches: 
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code from the repository
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Set up JDK 17 
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Cache Maven dependencies for faster builds
      - name: Cache Maven Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 4: Check for dependency vulnerabilities using OWASP Dependency-Check
      - name: Check for Dependency Vulnerabilities
        env:
          NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
        run: |
          mvn org.owasp:dependency-check-maven:check -Dnvd.api.key=${NVD_API_KEY}


      # Step 5: Run Code Formatter (using Spotless)
      - name: Run Code Formatter (Spotless)
        run: |
          mvn spotless:check

      # Step 6: Run PMD Linter
      - name: Run PMD Linter
        run: |
          mvn pmd:check

      # Step 7: Run Static Analysis with Infer
      - name: Run Static Analysis with Infer
        run: |
          curl -sSL "https://github.com/facebook/infer/releases/download/v1.2.0/infer-linux-x86_64-v1.2.0.tar.xz" \
          | sudo tar -C /opt -xJ && \
          sudo ln -s "/opt/infer-linux-x86_64-v1.2.0/bin/infer" /usr/local/bin/infer
          infer run -- mvn compile


      # Step 8: Build the Project (package the code)
      - name: Build Project
        run: |
          # mvn clean package
          mvn clean -B package -Dspring.profiles.active=${{github.head_ref}} --file pom.xml 
        env: 
          DATABASE_DEVELOPMENT_URL: ${{secrets.DATABASE_DEVELOPMENT_URL}}
          DATABASE_STAGING_URL: ${{secrets.DATABASE_STAGING_URL}}
          DATABASE_PRODUCTION_URL: ${{secrets.DATABASE_PRODUCTION_URL}}


      # Step 9: Upload the build artifact (JAR/WAR file)
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: target/*.jar
